"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 4.2.15.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import platform
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-d7rlo8mw56gl(^g@bm-5uou(o9jzk*gt97re13bd*og@!z8%)_' # Замените на ваш реальный SECRET_KEY в продакшене

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True # Установите False в продакшене

ALLOWED_HOSTS = [] # Добавьте домены вашего сервера в продакшене, например, ['yourdomain.com', 'www.yourdomain.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'corsheaders',          # <-- CORS Headers для кросс-доменных запросов
    'django.contrib.gis',   # <-- GeoDjango для работы с географическими данными

    'project',              # Ваше приложение
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',             # <-- CORS Middleware (Должен быть очень высоко)
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',         # <-- CSRF Middleware (CORS должен быть перед ним)
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / "templates"
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        # Меняем движок на PostGIS
        'ENGINE': 'django.contrib.gis.db.backends.postgis', # <-- Используем PostGIS backend
        'NAME': 'test',
        'USER': 'sys_admin',
        'PASSWORD': '12345',
        'HOST': 'localhost', # Это резолвится в 127.0.0.1 или ::1
        'PORT': '5433',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us' # Можно изменить на 'ru-ru' при необходимости

TIME_ZONE = 'UTC' # Используйте ваш часовой пояс, например, 'Europe/Moscow'

USE_I18N = True

USE_TZ = True # Рекомендуется использовать Time Zones


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
# STATIC_ROOT = BASE_DIR / 'staticfiles' # Укажите путь для сбора статики в продакшене


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- CORS HEADERS SETTINGS ---
# https://github.com/adamchainz/django-cors-headers
# Укажите источники, которым разрешен доступ к вашему API

# Вариант 1 (Проще для разработки): Разрешить все источники
CORS_ALLOW_ALL_ORIGINS = True

# Вариант 2 (Рекомендуется, даже для разработки): Явно указать разрешенные источники
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:5173", # Адрес вашего Vue dev сервера
#     "http://127.0.0.1:5173", # Добавить на всякий случай
#     # "https://yourproductionfrontend.com", # Адрес вашего фронтенда в продакшене
# ]

# Разрешить отправку куки/авторизационных заголовков в кросс-доменных запросах
CORS_ALLOW_CREDENTIALS = True


# --- GEODJANGO / GDAL / GEOS SETTINGS ---
# Настройки путей к библиотекам GDAL и GEOS, если Django не может найти их автоматически.
# Это особенно актуально для Windows.
# Если вы устанавливали через Conda, то часто ничего дополнительно настраивать не нужно.
# Если возникает ошибка ImproperlyConfigured GDAL/GEOS, раскомментируйте и укажите пути.

# Проверяем, работаем ли на Windows
if platform.system() == 'Windows':

    CONDA_BIN_PATH = 'C:/Users/iimin/miniconda3/Library/bin'

    # Проверяем, существует ли указанная папка перед использованием
    if os.path.exists(CONDA_BIN_PATH):
        # Добавляем папку с бинарниками в системную переменную PATH.
        # Это первый и часто достаточный способ для GeoDjango найти библиотеки.
        os.environ['PATH'] = CONDA_BIN_PATH + os.pathsep + os.environ.get('PATH', '')



        GDAL_LIBRARY_PATH = os.path.join(CONDA_BIN_PATH, 'gdal.dll') # <-- Укажите реальное имя файла GDAL

        # Возможно, также потребуется явно указать путь к GEOS, если возникнет ошибка по GEOS:
        # GEOS_LIBRARY_PATH = os.path.join(CONDA_BIN_PATH, 'geos_c.dll') # <-- Укажите реальное имя файла GEOS
